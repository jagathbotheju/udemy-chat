// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  member        Member?
}

model Member {
  id          String   @id @default(cuid())
  name        String
  gender      String
  dateOfBirth DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  city        String
  country     String
  image       String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]

  sourceLikes Like[] @relation("source")
  targetLikes Like[] @relation("target")

  senderMessages   Message[] @relation("sender")
  receiverMessages Message[] @relation("receiver")
}

model Message {
  id              String    @id @default(cuid())
  text            String
  createdAt       DateTime  @default(now())
  dateRead        DateTime?
  senderDeleted   Boolean   @default(false)
  receiverDeleted Boolean   @default(false)

  senderId String?
  sender   Member? @relation("sender", fields: [senderId], references: [userId], onDelete: SetNull)

  receiverId String?
  receiver   Member? @relation("receiver", fields: [receiverId], references: [userId], onDelete: SetNull)
}

model Photo {
  id       String  @id @default(cuid())
  url      String
  publicId String?

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Like {
  sourceUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)

  targetUserId String
  targetMember Member @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
